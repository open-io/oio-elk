filter {

            if [fields][name_log] == "oio-access" {

              grok {
                    patterns_dir => ["/etc/logstash/conf.d/patterns"]
                    match => { "message" => "%{ACCESS_LOG}" }

              }

            }
            if [fields][name_log] == "oio-logs" {

             grok {
                   patterns_dir => ["/etc/logstash/conf.d/patterns"]
                   match => { "message" => "%{DEBUG_LOG}" }


                   }

            }
            if [fields][name_log] == "oio-swift" {

                grok {
                      patterns_dir => ["/etc/logstash/conf.d/patterns"]
                      match => { "message" => "%{SWIFT_LOG}" }


                }
                if ([bytes_sent]){

                    ruby {
                          code => "event.set('bytes_sent', event.get('bytes_sent').to_f / 1000000)"
                    }
                }
                if ([bytes_recvd]){

                    ruby {
                          code => "event.set('bytes_recvd', event.get('bytes_recvd').to_f / 1000000)"
                    }
                }


           }
           if [fields][name_log] == "oio-blob-indexer" {

               grok {
                     patterns_dir => ["/etc/logstash/conf.d/patterns"]
                     match => { "message" => "%{BLOB_INDEXER_LOG}" }


               }

          }
          if [fields][name_log] == "oio-errors" {

              grok {
                    patterns_dir => ["/etc/logstash/conf.d/patterns"]
                    match => { "message" => "%{ERROR_LOG}" }


                    }

         }
    date {
       match => [ "log_timestamp" , "yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ", "MMM dd HH:mm:ss" , "dd MMM HH:mm:ss" , "dd MMM HH:mm:ss yyyy"]
    }

    mutate {

      remove_field => [ "source","_source","beat","_type","offset"]

    }
    ruby {
      code => "event.set('response_time', event.get('response_time').to_f / 1000000)"
    }


}
